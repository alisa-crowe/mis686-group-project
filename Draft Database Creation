CREATE DATABASE Bookstore;
USE Bookstore;


DROP TABLE IF EXISTS Author;
DROP TABLE IF EXISTS Book;
DROP TABLE IF EXISTS Customer;
DROP TABLE IF EXISTS Inventory;
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS OrderItem;
DROP TABLE IF EXISTS Payment;
DROP TABLE IF EXISTS Publisher;
DROP TABLE IF EXISTS Review;
DROP TABLE IF EXISTS Returns;
DROP TABLE IF EXISTS Supplier;


CREATE TABLE Author(
   AuthorID SMALLINT NOT NULL UNIQUE,
   FirstName VARCHAR(100) NOT NULL,
   LastName VARCHAR(100) NOT NULL,
   Biography VARCHAR(500),
   DateOfBirth DATETIME NOT NULL,
   PRIMARY KEY (AuthorID)
);


CREATE TABLE Customer(
   CustomerID SMALLINT NOT NULL UNIQUE,
   FirstName VARCHAR(100) NOT NULL,
   LastName VARCHAR(100) NOT NULL,
   Email VARCHAR(100) NOT NULL UNIQUE,
   Address VARCHAR(300),
   PhoneNumber VARCHAR(15) NOT NULL,
   PRIMARY KEY (CustomerID)
);


CREATE TABLE Publisher(
   PublisherID SMALLINT NOT NULL UNIQUE,
   Name VARCHAR(100) NOT NULL,
   Address VARCHAR(300),
   PhoneNumber VARCHAR(15) NOT NULL,
   Email VARCHAR(100) NOT NULL UNIQUE,
   PRIMARY KEY (PublisherID)
);


CREATE TABLE Supplier(
   SupplierID SMALLINT NOT NULL UNIQUE,
   Name VARCHAR(100) NOT NULL,
   Address VARCHAR(300),
   Email VARCHAR(100) NOT NULL UNIQUE,
   PhoneNumber VARCHAR(15) NOT NULL,
   PRIMARY KEY (SupplierID)
);


CREATE TABLE Book(
   BookID SMALLINT NOT NULL UNIQUE,
   Title VARCHAR(100),
   ISBN VARCHAR(13) NOT NULL UNIQUE,
   AuthorID SMALLINT NOT NULL,
   Genre VARCHAR(50),
   PublisherID SMALLINT NOT NULL,
   PublicationDate DATETIME NOT NULL,
   Price SMALLMONEY NOT NULL,
   QuantityInStock SMALLINT NOT NULL,
   PRIMARY KEY(BookID),
   FOREIGN KEY (AuthorID) REFERENCES Author (AuthorID) 
ON DELETE SET NULL,
   FOREIGN KEY (PublisherID) REFERENCES Publisher (PublisherID) 
ON DELETE SET NULL,
);


CREATE TABLE Inventory(
   InventoryID SMALLINT NOT NULL UNIQUE,
   BookID SMALLINT NOT NULL,
   QuantityInStock SMALLINT,
   SupplierID SMALLINT NOT NULL,
   PRIMARY KEY(InventoryID),
   FOREIGN KEY (BookID) REFERENCES Book (BookID)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
   FOREIGN KEY (SupplierID) REFERENCES Supplier (SupplierID)
	ON DELETE RESTRICT
	ON UPDATE CASCADE,
   CHECK (QuantityInStock >= 0)
);


CREATE TABLE Orders(
   OrderID SMALLINT NOT NULL UNIQUE,
   CustomerID SMALLINT NOT NULL,
   OrderDate DATETIME NOT NULL,
   OrderStatus VARCHAR(50) NOT NULL,
   TotalAmount MONEY NOT NULL,
   PaymentMethod VARCHAR(100) NOT NULL,
   ShippingAddress VARCHAR(500) NOT NULL,
   PRIMARY KEY(OrderID),
   FOREIGN KEY (CustomerID) REFERENCES Customer (CustomerID) 
ON DELETE RESTRICT
);


CREATE TABLE OrderItem(
   OrderItemID  SMALLINT NOT NULL UNIQUE,
   OrderID  SMALLINT NOT NULL,
   BookID  SMALLINT NOT NULL,
   Quantity  SMALLINT NOT NULL,
   UnitPrice SMALLMONEY NOT NULL,
   PRIMARY KEY(OrderItemID),
   FOREIGN KEY (OrderID) REFERENCES Orders (OrderID)
ON DELETE CASCADE
ON UPDATE CASCADE,
   FOREIGN KEY (BookID) REFERENCES Book (BookID)
	ON DELETE RESTRICT
	ON UPDATE CASCADE,
   CHECK (Quantity > 0),
   CHECK (UnitPrice > 0)
);


CREATE TABLE Payment(
   PaymentID  SMALLINT NOT NULL UNIQUE,
   OrderID  SMALLINT NOT NULL,
   PaymentMethod VARCHAR(100) NOT NULL,
   PaymentDate DATETIME NOT NULL,
   Amount MONEY NOT NULL,
   PRIMARY KEY(PaymentID),
   FOREIGN KEY (OrderID) REFERENCES Orders (OrderID) 
	ON DELETE CASCADE
ON UPDATE CASCADE,
   CHECK (Amount > 0)
);


CREATE TABLE Review(
   ReviewID  SMALLINT NOT NULL UNIQUE,
   BookID  SMALLINT NOT NULL,
   CustomerID  SMALLINT NOT NULL,
   Rating  SMALLINT,
   ReviewDate DATETIME NOT NULL,
   ReviewText VARCHAR(10000),
   PRIMARY KEY(ReviewID),
   FOREIGN KEY (BookID) REFERENCES Book (BookID)
ON DELETE CASCADE
ON UPDATE CASCADE,
   FOREIGN KEY (CustomerID) REFERENCES Customer (CustomerID)
ON DELETE CASCADE
ON UPDATE CASCADE,
   CHECK (Rating IS NOT NULL OR ReviewText IS NOT NULL),
   CHECK (Rating BETWEEN 1 AND 5)
);


CREATE TABLE Returns(
   ReturnID  SMALLINT NOT NULL UNIQUE,
   OrderID  SMALLINT NOT NULL,
   BookID  SMALLINT NOT NULL,
   ReturnDate DATETIME NOT NULL,
   QuantityReturned  SMALLINT NOT NULL,
   Reason VARCHAR(500),
   PRIMARY KEY(ReturnID),
   FOREIGN KEY (OrderID) REFERENCES Orders (OrderID)
ON DELETE CASCADE
ON UPDATE CASCADE,
   FOREIGN KEY (BookID) REFERENCES Book (BookID)
	ON DELETE RESTRICT
	ON UPDATE CASCADE,
   CHECK (QuantityReturned > 0)
);


CREATE INDEX idx_book_id ON Inventory(BookID);


CREATE INDEX idx_supplier_id ON Inventory(SupplierID);


CREATE INDEX idx_order_id ON OrderItem(OrderID);


CREATE INDEX idx_book_id ON OrderItem(BookID);


CREATE INDEX idx_order_id ON Payment(OrderID);


CREATE INDEX idx_book_id ON Review(BookID);


CREATE INDEX idx_customer_id ON Review(CustomerID);


CREATE INDEX idx_order_id ON Returns(OrderID);


CREATE INDEX idx_book_id ON Returns(BookID);


INSERT INTO Author (AuthorID, FirstName, LastName, Biography, DateOfBirth) VALUES
(1, 'John', 'Doe', 'John Doe is a prolific author of mystery novels.', '1970-01-15'),
(2, 'Jane', 'Smith', 'Jane Smith writes science fiction and fantasy.', '1980-05-22');


INSERT INTO Customer (CustomerID, FirstName, LastName, Email, Address, PhoneNumber) VALUES
(1, 'Alice', 'Johnson', 'alice.johnson@example.com', '123 Main St, Anytown, USA', '555-1234'),
(2, 'Bob', 'Williams', 'bob.williams@example.com', '456 Oak St, Anytown, USA', '555-5678');


INSERT INTO Publisher (PublisherID, Name, Address, PhoneNumber, Email) VALUES
(1, 'Mystery House', '789 Pine St, Anytown, USA', '555-8765', 'contact@mysteryhouse.com'),
(2, 'Sci-Fi World', '101 Maple St, Anytown, USA', '555-4321', 'info@scifiworld.com');


INSERT INTO Supplier (SupplierID, Name, Address, Email, PhoneNumber) VALUES
(1, 'Book Distributors Inc.', '202 Elm St, Anytown, USA', 'sales@bookdistributors.com', '555-9876'),
(2, 'Global Books', '303 Birch St, Anytown, USA', 'support@globalbooks.com', '555-6543');


INSERT INTO Book (BookID, Title, ISBN, AuthorID, Genre, PublisherID, PublicationDate, Price, QuantityInStock) VALUES
(1, 'Mystery at the Mansion', '1234567890123', 1, 'Mystery', 1, '2022-01-01', 19.99, 50),
(2, 'Journey to Mars', '9876543210987', 2, 'Science Fiction', 2, '2023-05-15', 24.99, 30);


INSERT INTO Inventory (InventoryID, BookID, QuantityInStock, SupplierID) VALUES
(1, 1, 50, 1),
(2, 2, 30, 2);


INSERT INTO Orders (OrderID, CustomerID, OrderDate, OrderStatus, TotalAmount, PaymentMethod, ShippingAddress) VALUES
(1, 1, '2024-11-01', 'Shipped', 39.98, 'Credit Card', '123 Main St, Anytown, USA'),
(2, 2, '2024-11-02', 'Processing', 24.99, 'PayPal', '456 Oak St, Anytown, USA');


INSERT INTO OrderItem (OrderItemID, OrderID, BookID, Quantity, UnitPrice) VALUES
(1, 1, 1, 2, 19.99),
(2, 2, 2, 1, 24.99);


INSERT INTO Payment (PaymentID, OrderID, PaymentMethod, PaymentDate, Amount) VALUES
    (1, 1, 'Credit Card', '2024-11-01', 39.98),
    (2, 2, 'PayPal', '2024-11-02', 24.99);


CREATE VIEW CustomerOrders AS
SELECT
   o.OrderID,
   c.CustomerID,
   c.FirstName,
   c.LastName,
   o.OrderDate,
   o.OrderStatus,
   o.TotalAmount
FROM Orders o
JOIN Customer c ON o.CustomerID = c.CustomerID;


CREATE VIEW BookInventory AS
SELECT
   b.BookID,
   b.Title,
   b.ISBN,
   i.QuantityInStock,
   s.Name AS SupplierName
FROM Book b
JOIN Inventory i ON b.BookID = i.BookID
JOIN Supplier s ON i.SupplierID = s.SupplierID;


CREATE VIEW OrderDetails AS
SELECT
   o.OrderID,
   oi.OrderItemID,
   b.Title,
   oi.Quantity,
   oi.UnitPrice,
   (oi.Quantity * oi.UnitPrice) AS TotalPrice
FROM Orders o
JOIN OrderItem oi ON o.OrderID = oi.OrderID
JOIN Book b ON oi.BookID = b.BookID;


CREATE PROCEDURE AddNewOrder(
   IN p_CustomerID  SMALLINT,
   IN p_OrderDate DATETIME,
   IN p_OrderStatus VARCHAR(50),
   IN p_TotalAmount MONEY,
   IN p_PaymentMethod VARCHAR(100),
   IN p_ShippingAddress VARCHAR(500)
)
BEGIN
    INSERT INTO Orders (CustomerID, OrderDate, OrderStatus, TotalAmount, PaymentMethod, ShippingAddress)
    VALUES (p_CustomerID, p_OrderDate, p_OrderStatus, p_TotalAmount, p_PaymentMethod, p_ShippingAddress);
END;


CREATE PROCEDURE UpdateInventory(
   IN p_BookID  SMALLINT,
   IN p_Quantity  SMALLINT,
)
BEGIN
    UPDATE Inventory
    SET QuantityInStock = QuantityInStock - p_Quantity
    WHERE BookID = p_BookID;
END;


CREATE TRIGGER AfterOrderItemInsert
AFTER INSERT ON OrderItem
FOR EACH ROW
BEGIN
    CALL UpdateInventory(NEW.BookID, NEW.Quantity);
END;
